type Query {
    contracts: [Contract] @all
    contract(id: ID @eq): Contract @find
    parties: [Party] @all
    party(id: ID @eq): Party @find
    notes: [Note] @all
    note(id: ID @eq): Note @find
}

type Mutation {
    createContract(
        title: String @rules(apply: ["required"])
    ): Contract @create
    updateContract(
        id: ID @rules(apply: ["required"])
        title: String @rules(apply: ["required"])
    ): Contract @update
    deleteContract(
        id: ID! @rules(apply: ["required"])
    ): Contract @delete
    createParty(
        title: String! @rules(apply: ["required"])
        contract: Int!
    ): Party @create
    updateParty(
        id: ID @rules(apply: ["required"])
        title: String! @rules(apply: ["required"])
        contract: Int!
    ): Party @update
    deleteParty(
        id: ID! @rules(apply: ["required"])
    ): Party @delete
    createNote(
        title: String! @rules(apply: ["required"])
        body: String
        contract: Int!
    ): Note @create
    updateNote(
        id: ID @rules(apply: ["required"])
        title: String! @rules(apply: ["required"])
        body: String @rules(apply: ["required"])
        contract: Int!
    ): Note @update
    deleteNote(
        id: ID! @rules(apply: ["required"])
    ): Note @delete
}

type Contract {
    id: ID!
    title: String!
    parties: [Party] @hasMany
    notes: [Note] @hasMany
    rclass: Rclass! @hasOne
}

type Party {
    id: ID!
    title: String!
    contract: Contract! @belongsTo
    rclass: Rclass! @hasOne
}

type Note {
    id: ID!
    title: String!
    body: String!
    contract: Contract! @belongsTo
    rclass: Rclass! @hasOne
}
