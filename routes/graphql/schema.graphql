"A datetime string with format 'Y-m-d H:i:s', e.g. '2018-01-01 13:00:00'."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format 'Y-m-d', e.g. '2011-05-23'."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    # users: [User!]! @paginate(type: "paginator" model: "App\\User")
    # user(id: ID @eq): User @find(model: "App\\User")

    contracts: [Contract] @all
    contract(id: ID @eq): Contract @find

    parties: [Party] @all
    party(id: ID @eq): Party @find

    rclasses: [Rclass] @all
    rclass(id: ID @eq): Rclass @find
}

type Mutation {
    # createUser(
    #     name: String @rules(apply: ["required"])
    #     email: String @rules(apply: ["required", "email", "unique:users,email"])
    # ): User @create(model: "App\\User")
    # updateUser(
    #     id: ID @rules(apply: ["required"])
    #     name: String
    #     email: String @rules(apply: ["email"])
    # ): User @update(model: "App\\User")
    # deleteUser(
    #     id: ID @rules(apply: ["required"])
    # ): User @delete(model: "App\\User")

    createContract(
        title: String @rules(apply: ["required"])
    ): Contract @create

    updateContract(
        id: ID @rules(apply: ["required"])
        title: String @rules(apply: ["required"])
    ): Contract @update

    deleteContract(
        id: ID! @rules(apply: ["required"])
    ): Contract @delete

    createParty(
        title: String! @rules(apply: ["required"])
        contract: Int!
    ): Party @create

    updateParty(
        id: ID @rules(apply: ["required"])
        title: String! @rules(apply: ["required"])
        contract: Int!
    ): Party @update

    deleteParty(
        id: ID! @rules(apply: ["required"])
    ): Party @delete

    createRclass(
        rclassname: String! @rules(apply: ["required"])
        class: String! @rules(apply: ["required"])
    ): Rclass @create
}

# type User {
#     id: ID!
#     name: String!
#     email: String!
#     created_at: DateTime!
#     updated_at: DateTime!
# }

type Rclass {
    id: ID!
    rclassname: String!
    class: String!
    contracts: [Contract] @hasMany
    parties: [Party] @hasMany
}

type Contract {
    id: ID!
    title: String!
    parties: [Party] @hasMany
    rclass: Rclass! @hasOne
}

type Party {
    id: ID!
    title: String!
    contract: Contract! @belongsTo
    rclass: Rclass! @hasOne
}
